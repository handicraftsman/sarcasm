(import (scheme base)
        (scheme write)
        (sarcasm test))

(display "(scheme base) tests\n")

(test-begin)

;; Numbers
(is-true  (number? 1))
(is-true  (number? 1.5))
(is-false (number? ""))
(is-true (real? 1.5))
(is-true (real? 2))
(is-true (integer? 10))
(is-false (integer? #\a))
(is-false (exact? 3.0))
(is-true (exact? 3))
(is-true (exact-integer? 32))
(is-false (exact-integer? 32.0))
(is-true (finite? 3))
(is-false (finite? +inf.0))
(is-false (infinite? 3))
(is-true (infinite? -inf.0))
(is-false (infinite? +nan.0))
(is-false (nan? 32))
(is-true (nan? +nan.0))
(is-true (= 1 1 1 1 1 1.0))
(is-true (< 1 2 3 4))
(is-false (< 1 1 2 3))
(is-true (<= 1 2 3 4))
(is-true (<= 1 1 2 3))
(is-true (> 3 2 1))
(is-false (> 1 2 3))
(is-true (>= 3 2 1))
(is-true (zero? 0))
(is-true (zero? 0.0))
(is-false (zero? 42))
(is-true (positive? 0.0))
(is-true (positive? 5))
(is-true (positive? +inf.0))
(is-false (positive? -1))
(is-true (negative? -1))
(is-false (negative? 0))
(is-true (negative? -inf.0))
(is 0 (+))
(is 1 (+ 1))
(is 5 (+ 2 3))
(is 3 (+ 5 -2))
(is 3.0 (+ 0.5 2.5))
(is 1 (*))
(is 5 (* 5))
(is 2 (* 4 0.5))
(is 0 (- 0))
(is -5 (- 5))
(is 2 (- 5 3))
(is 2.0 (- 2.5 0.5))
(is 2 (truncate 2))
(is -4.0 (truncate -4.5))
(is 3.0 (truncate 3.5))
(is 2 (exact 2))
(is -3 (exact -3.14))
;; Booleans
(is #t #t)
(is #f #f)
(is #f '#f)
(is-false (not #t))
(is-false (not 3))
(is-false (not (list 3)))
(is-true (not #f))
(is-false (not '()))
(is-false (not (list)))
(is-false (not 'nil))
(is-true (boolean? #t))
(is-false (boolean? 0))
(is-false (boolean? '()))
(skip (is-true (boolean=? #t #t #t)))
;; Pairs and lists
(is-true (pair? '(a . b)))
(is-true (pair? '(a b c)))
(is-false (pair? '()))
(is-false (pair? '#(a b)))
(is '(a) (cons 'a '()))
(is '((a) b c d) (cons '(a) '(b c d)))
(is '("a" b c) (cons "a" '(b c)))
(is '(a . 3) (cons 'a 3))
(is '((a b) . c) (cons '(a b) 'c))
(is 'a (car '(a b c)))
(is '(a) (car '((a) b c)))
(is 1 (car '(1 . 2)))
(skip (is-error (car '())))
(is '(b c d) (cdr '((a) b c d)))
(is 2 (cdr '(1 . 2)))
(skip (is-error (cdr '())))

(test-end) 
(test-exit)

